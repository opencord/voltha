syntax = "proto3";

option go_package = "github.com/opencord/voltha/protos/go/bbf_fiber";

package bbf_fiber;

import public "meta.proto";
import "ietf_interfaces.proto";
import "bbf_fiber_channelgroup_body.proto";
import "bbf_fiber_channelpartition_body.proto";
import "bbf_fiber_channelpair_body.proto";
import "bbf_fiber_channeltermination_body.proto";
import "bbf_fiber_ontani_body.proto";
import "bbf_fiber_v_ontani_body.proto";
import "bbf_fiber_v_enet_body.proto";
import "bbf_fiber_gemport_body.proto";
import "bbf_fiber_multicast_distribution_set_body.proto";
import "bbf_fiber_multicast_gemport_body.proto";
import "bbf_fiber_tcont_body.proto";
import "bbf_fiber_traffic_descriptor_profile_body.proto";

message ChannelgroupConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    ChannelgroupConfigData data = 3;
    string name = 4;
    uint32 cg_index = 5 [(voltha.access) = READ_ONLY];
}

message ChannelpartitionConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    ChannelpartitionConfigData data = 3;
    string name = 4;
}

message ChannelpairConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    ChannelpairConfigData data = 3;
    string name = 4;
}
message ChannelpairOper
{
    ietf_interfaces.Interface interface = 1;
    ChannelpairOperData operdata = 2;
    string name = 3;
}

message ChannelterminationConfig
{
    string id = 1; // To work around a chameleon POST bug
    ietf_interfaces.Interface interface = 2;
    ChannelterminationConfigData data = 3;
    string name = 4;
}
message ChannelterminationOper
{
    ietf_interfaces.Interface interface = 1;
    ChannelterminationOperData data = 2;
    string name = 3;
}

message OntaniConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    OntaniConfigData data = 3;
    string name = 4;
}
message OntaniOper
{
    ietf_interfaces.Interface interface = 1;
    OntaniOperData data = 2;
    string name = 3;
}

message VOntaniConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    VOntaniConfigData data = 3;
    string name = 4;
}

message VEnetConfig
{
    string id = 1 [(voltha.access) = READ_ONLY];
    ietf_interfaces.Interface interface = 2;
    VEnetConfigData data = 3;
    string name = 4;
}

message AllChannelgroupConfig
{
    repeated ChannelgroupConfig channelgroup_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllChannelpartitionConfig
{
    repeated ChannelpartitionConfig channelpartition_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllChannelpairConfig
{
    repeated ChannelpairConfig channelpair_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllChannelterminationConfig
{
    repeated ChannelterminationConfig channeltermination_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllOntaniConfig
{
    repeated OntaniConfig ontani_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllVOntaniConfig
{
    repeated VOntaniConfig v_ontani_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllVEnetConfig
{
    repeated VEnetConfig v_enet_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllTrafficDescriptorProfileData
{
    repeated TrafficDescriptorProfileData traffic_descriptor_profiles = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllTcontsConfigData
{
    repeated TcontsConfigData tconts_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllGemportsConfigData
{
    repeated GemportsConfigData gemports_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllMulticastGemportsConfigData
{
    repeated MulticastGemportsConfigData multicast_gemports_config = 1
        [(voltha.child_node) = {key: "name"}];
}
message AllMulticastDistributionSetData
{
    repeated MulticastDistributionSetData multicast_distribution_sets = 1
        [(voltha.child_node) = {key: "name"}];
}
